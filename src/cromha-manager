#!/bin/bash

# Basic imports

option=$1
parameter=$2
parameter2=$3

disable_done=False

random_sleep_progress_bar=$(echo $(( $RANDOM % 8 + 1 )))

bold=$(tput bold)
normal=$(tput sgr0)

Color_Off='\033[0m'       # Text Reset

# Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White

# Bold
BBlack='\033[1;30m'       # Black
BRed='\033[1;31m'         # Red
BGreen='\033[1;32m'       # Green
BYellow='\033[1;33m'      # Yellow
BBlue='\033[1;34m'        # Blue
BPurple='\033[1;35m'      # Purple
BCyan='\033[1;36m'        # Cyan
BWhite='\033[1;37m'       # White

# Functions

# Progress bar

function ProgressBar () {
      for i in {1..100}; do
	output="\r"

	output="$output ["
	total=$i
	count=0

	while [ $count -lt $total ]; do
		output="$output${progress_bar_full}"
		let count=$count+3
	done

	let total=100-$total
	count=0

	while [ $count -lt $total ]; do
		output="${output}${progress_bar_none}" 
		let count=$count+3
	done
	output="$output ] $i/100%"
	echo -ne "$output"

      random_sleep_progress_bar=$(echo "0.$(( ($RANDOM%40) + 100))")
	sleep $random_sleep_progress_bar
done
echo " $progress_bar_done"
}


# YAML parser
function parse_yaml {
      local prefix=$2
      local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
      sed -ne "s|^\($s\):|\1|" \
            -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
            -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
      awk -F$fs '{
            indent = length($1)/2;
            vname[indent] = $2;
            for (i in vname) {if (i > indent) {delete vname[i]}}
            if (length($3) > 0) {
                  vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
                  printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
            }
      }'
}
eval "$(parse_yaml $HOME/cromha-manager-config.yaml "CONFIG_")"

flatpak=$(echo "$CONFIG_package_managers_flatpak")
snap=$(echo "$CONFIG_package_managers_snapcraft")
yum=$(echo "$CONFIG_package_managers_yum")
pacman=$(echo "$CONFIG_package_managers_pacman")
cargo=$(echo "$CONFIG_package_managers_cargo")
dnf=$(echo "$CONFIG_package_managers_dnf")
apt=$(echo "$CONFIG_package_managers_apt")
zypp=$(echo "$CONFIG_package_managers_zypp")

# Informations variables

version_ver=$(echo "$CONFIG_informations_version")
default_config="settings:
  wait_time: 15
  progress_bar_done_sprite: ✔
  progress_bar_empty_sprite: ▱
  progress_bar_full_sprite: ▰
package_managers:
  apt: False
  cargo: False
  dnf: False
  flatpak: False
  pacman: False
  snapcraft: False
  yum: False
  zypp: False
informations:
  version: 0.1"

# Settings

wait_time=$(echo "$CONFIG_settings_wait_time")

progress_bar_done=$(echo "$CONFIG_settings_progress_bar_done_sprite")
progress_bar_none=$(echo "$CONFIG_settings_progress_bar_empty_sprite")
progress_bar_full=$(echo "$CONFIG_settings_progress_bar_full_sprite")

# Start jobs

if [ "$option" == "" ]; then
      echo -e "${BRed}_________                       .__            
\_   ___ \_______  ____   _____ |  |__ _____   
/    \  \/\_  __ \/  _ \ /     \|  |  \\__  \  
\     \____|  | \(  <_> )  Y Y  \   Y  \/ __ \_
 \______  /|__|   \____/|__|_|  /___|  (____  /
        \/                    \/     \/     \/ 
${Color_Off}"
      echo " "
      echo "${bold}===============================================================================${normal}"
      echo -e "${BPurple}Github Repository${Color_Off}: ${BBlue}https://github.com/OcelotWalrus/Bash-Multi-Package-Manager${Color_Off}"
      echo " "
      echo -e "${Green}Current version${Color_Off}: ${BYellow}$version_ver${Color_Off}"
      echo "${bold}===============================================================================${normal}"
      echo " "
      echo -e "${Cyan}A bash script to manage multiple package
managers easily with high customizability.${Color_Off}"
      echo " "
      echo "Hint: run '$ cromha_manager help' for help"
      disable_done=True
fi

if [ $disable_done == False ]; then
      echo "${bold}Note that this operation can take multiple minutes${normal}"
      echo " "
fi

# Options

if [ "$option" == "autoremove" ]; then
      echo "Autoremoving packages..."
      if [ "$flatpak" == True ]; then
            sudo flatpak uninstall -y --unused #>&- 2>&-
            echo "[Autoremoving Flatpak Packages]"
            #ProgressBar
      fi
      if [ "$snap" == True ]; then
            set -eu
            LANG=C snap list --all | awk '/disabled/{print $1, $3}' |
            while read snapname revision;
            do
                  sudo snap remove "$snapname" --revision="$revision" #>&- 2>&-
            done
            echo "[Autoremoving Snapcraft Packages]"
            #ProgressBar
      fi
      if [ "$yum" == True ]; then
            sudo yum autoremove -y #>&- 2>&-
            echo "[Autoremoving Yum Packages]"
            #ProgressBar
      fi
      if [ "$pacman" == True ]; then
            echo "${bold}ERROR: Sorry but pacman autoremove is not yet supported${normal}"
      fi
      if [ "$cargo" == True ]; then
            echo ${bold}ERROR: Sorry but cargo autoremove is not yet supported${normal}
      fi
      if [ "$dnf" == True ]; then
            sudo dnf autoremove -y #>&- 2>&-
            echo "[Autoremoving Dnf Packages]"
            #ProgressBar
      fi
      if [ "$apt " == True ]; then
            sudo apt autoremove -y #>&- 2>&-
            echo "[Autoremoving APT Packages]"
            #ProgressBar
      fi
      if [ "$zypp" == True ]; then
            echo ${bold}ERROR: Sorry but zypper autoremove is not yet supported${normal}
      fi
fi

if [ "$option" == "upgrade" ] || [ "$option" == "update" ]; then
      echo "Checking for package managers updates..."
      sleep 3
      echo "Updating different package managers..."
      echo " "
      if [ $flatpak == True ]; then
            echo "[Updating Flatpak Packages]"
            sudo flatpak update -y >&- 2>&- & PIDFLATPAK1=$!
            ProgressBar & PIDFLATPAK2=$!
            wait $PIDFLATPAK1
            wait $PIDFLATPAK2
      fi
      if [ $snap == True ]; then
            echo "[Updating Snapcraft Packages]"
            sudo snap refresh >&- 2>&- & PIDSNAP1=$!
            ProgressBar & PIDSNAP2=$!
            wait $PIDSNAP1
            wait $PIDSNAP2
      fi
      if [ $yum == True ]; then
            echo "[Updating Yum Packages]"
            sudo yum update -y >&- 2>&- & PIDYUM1=$!
            ProgressBar & PIDYUM2=$!
            wait $PIDYUM1
            wait $PIDYUM2
      fi
      if [ $pacman == True ]; then
            echo "[Updating Pacman Packages]"
            sudo pacman -Syu >&- 2>&- & PIDPACMAN1=$!
            ProgressBar & PIDPACMAN2=$!
            wait $PIDPACMAN1
            wait $PIDPACMAN2
      fi
      if [ $cargo == True ]; then
            echo "[Updating Cargo Packages]"
            sudo cargo update -y >&- 2>&- & PIDCARGO1=$!
            ProgressBar & PIDCARGO2=$!
            wait $PIDCARGO1
            wait $PIDCARGO2
      fi
      if [ $dnf == True ]; then
            echo "[Updating Dnf Packages]"
            sudo dnf update -y >&- 2>&- & PIDDNF1=$!
            ProgressBar & PIDDNF2=$!
            wait $PIDDNF1
            wait $PIDDNF2
      fi
      if [ $apt == True ]; then
            echo "[Updating APT Packages]"
            sudo apt update -y >&- 2>&- & PIDAPT1=$!
            ProgressBar & PIDAPT2=$!
            wait $PIDAPT1
            wait $PIDAPT2
      fi
      if [ $zypp == True ]; then
            echo "[Updating Zypp Packages]"
            sudo zypper update -y >&- 2>&- & PIDZYPP1=$!
            ProgressBar & PIDZYPP2=$!
            wait $PIDZYPP1
            wait $PIDZYPP2
      fi
fi

if [ "$option" == "help" ]; then
	echo "${bold}HELP PAGE:"
	echo " "
	echo "${bold}OPTIONS${normal} (First entry):"
	echo " "
	echo "${bold}autoremove${normal}: remove all unneeded packages that were originally installed as dependencies"
	echo "${bold}help${normal}: show this page"
      echo "${bold}list/packages${normal}: list packages installed on your package managers one by one in nano"
	echo "${bold}upgrade/update${normal}: update your system"
      echo "${bold}customize${normal}: customize config.yaml"
      echo "${bold}reset${normal}: reset config ($HOME/cromha-manager-config.yaml file)"
	echo " "
	echo "${bold}PARAMETERS${normal} (Second and Third entry):"
	echo " "
	echo "${bold}-clean${normal}: clean cashed data after executing option"
	echo "${bold}-exit${normal}: close terminal window after executing option"
	echo "${bold}-poweroff${normal}: poweroff your system after executing option (alias: -shutdown)"
	echo "${bold}-reboot${normal}: reboot your system after executing option (alias: -restart)"
	echo "${bold}-restart${normal}: restart your system after executing option (alias: -reboot)"
	echo "${bold}-shutdown${normal}: shutdown your system after executing option (alias: -poweroff)"
      echo " "
      echo "${bold}CUSTOMIZATION:"
      echo "${bold}customize${normal}: customize config.yaml"
      echo "Go to: https://github.com/OcelotWalrus/Bash-Multi-Package-Manager for more information"
	disable_done=True
fi

if [ "$option" == "customize" ]; then
      echo Opening config.yaml...
      sleep 1
      nano $HOME/cromha-manager-config.yaml
      sleep .1
fi

if [ "$option" == "reset" ]; then
      echo "Reseting config located in $HOME/cromha-manager-config.yaml file..."
      sudo rm $HOME/cromha-manager-config.yaml
      echo "$default_config" >> $HOME/cromha-manager-config.yaml
      chmod 777 $HOME/cromha-manager-config.yaml
fi

if [ "$option" == "list" ] || [ "$option" == "packages" ]; then
      echo "Searching for your installed packages..."
      echo "Warning, packages list file can be very big..."
      echo " "
      if [ $flatpak == True ]; then
            echo "Would you want to get the list of your flatpak packages ? (y/n)"
            read anwser_flatpack
      fi
      if [ $snap == True ]; then
            echo "Would you want to get the list of your snapcraft packages ? (y/n)"
            read anwser_snapcraft
      fi
      if [ $yum == True ]; then
            echo "Would you want to get the list of your yum packages ? (y/n)"
            read anwser_yum
      fi
      if [ $pacman == True ]; then
            echo "Would you want to get the list of your pacman packages ? (y/n)"
            read anwser_pacman
      fi
      if [ $cargo == True ]; then
            echo "Would you want to get the list of your cargo packages ? (y/n)"
            read anwser_cargo
      fi
      if [ $dnf == True ]; then
            echo "Would you want to get the list of your dnf packages ? (y/n)"
            read anwser_dnf
      fi
      if [ $apt == True ]; then
            echo "Would you want to get the list of your apt packages ? (y/n)"
            read anwser_apt
      fi
      if [ $zypp == True ]; then
            echo "Would you want to get the list of your zypp packages ? (y/n)"
            read anwser_zypp
      fi
      if [ "$anwser_flatpack" == "y" ]; then
            flatpak_list=$(flatpak list)
            echo "[FLATPAK OUTPUT]" >> $HOME/packages-list-cromha.temp
            echo "$flatpak_list" >> $HOME/packages-list-cromha.temp
      fi
      if [ "$anwser_snapcraft" == "y" ]; then
            snap_list=$(snap list)
            echo "[SNAPCRAFT OUTPUT]" >> $HOME/packages-list-cromha.temp
            echo "$snap_list" >> $HOME/packages-list-cromha.temp
      fi
      if [ "$anwser_yum" == "y" ]; then
            yum_list=$(yum list)
            echo "[YUM OUTPUT]" >> $HOME/packages-list-cromha.temp
            echo "$yum_list" >> $HOME/packages-list-cromha.temp
      fi
      if [ "$anwser_pacman" == "y" ]; then
            pacman_list=$(pacman -Q)
            echo "[PACMAN OUTPUT]" >> $HOME/packages-list-cromha.temp
            echo "$pacman_list" >> $HOME/packages-list-cromha.temp
      fi
      if [ "$anwser_cargo" == "y" ]; then
            cargo_list=$(cargo install --list)
            echo "[CARGO OUTPUT]" >> $HOME/packages-list-cromha.temp
            echo "$cargo_list" >> $HOME/packages-list-cromha.temp
      fi
      if [ "$anwser_dnf" == "y" ]; then
            dnf_list=$(dnf list)
            echo "[DNF OUTPUT]" >> $HOME/packages-list-cromha.temp
            echo "$dnf_list" >> $HOME/packages-list-cromha.temp
      fi
      if [ "$anwser_apt" == "y" ]; then
            apt_list=$(apt list --installed)
            echo "[APT OUTPUT]" >> $HOME/packages-list-cromha.temp
            echo "$apt_list" >> $HOME/packages-list-cromha.temp
      fi
      if [ "$anwser_apt" == "y" ]; then
            apt_list=$(apt list --installed)
            echo "[APT OUTPUT]" >> $HOME/packages-list-cromha.temp
            echo "$apt_list" >> $HOME/packages-list-cromha.temp
      fi
      if [ "$anwser_zypp" == "y" ]; then
            zypp_list=$(zypper search -i)
            echo "[ZYPPER OUTPUT]" >> $HOME/packages-list-cromha.temp
            echo "$zypp_list" >> $HOME/packages-list-cromha.temp
      fi
      echo "Opening temporary file where story installed packages list..."
      notify-send "Installed packages listing finished"
      sleep 1
      nano $HOME/packages-list-cromha.temp
      sleep 1
      echo "Deleting temporary file..."
      rm $HOME/packages-list-cromha.temp
fi

# Parameters

# First

if [ "$parameter" == "-clean" ]; then
      echo " "
	echo "Cleaning cashed data..."
	sudo dnf clean all -y
      echo " "
fi

if [ "$parameter" == "-exit" ]; then
      echo " "
	echo "Closing terminal window in $wait_time secs..."
      notify-send  "Closing terminal window in $wait_time secs..."
      sleep "$wait_time"
	kill -9 $PPID
fi

if [ "$parameter" == "-poweroff" ] || [ "$parameter" == "-shutdown" ]; then
	echo "Shutingdown your system in $wait_time seconds..."
      notify-send "Shutingdown your system in $wait_time seconds..."
	sleep "$wait_time"
	sudo poweroff
fi

if [ "$parameter" == "-reboot" ] || [ "$parameter" == "-restart" ]; then
	echo "Rebooting your system in $wait_time seconds..."
      notify-send "Rebooting your system in $wait_time seconds..."
	sleep "$wait_time"
	sudo reboot
fi

# Second

if [ "$parameter2" == "-clean" ]; then
      echo " "
	echo "Cleaning cashed data..."
	sudo dnf clean all -y
      echo " "
fi

if [ "$parameter2" == "-exit" ]; then
      echo " "
	echo "Closing terminal window in $wait_time secs..."
      notify-send  "Closing terminal window in $wait_time secs..."
      sleep "$wait_time"
	kill -9 $PPID
fi

if [ "$parameter2" == "-poweroff" ] || [ "$parameter" == "-shutdown" ]; then
	echo "Shutingdown your system in $wait_time seconds..."
      notify-send "Shutingdown your system in $wait_time seconds..."
	sleep "$wait_time"
	sudo poweroff
fi

if [ "$parameter2" == "-reboot" ] || [ "$parameter" == "-restart" ]; then
	echo "Rebooting your system in $wait_time seconds..."
      notify-send "Rebooting your system in $wait_time seconds..."
	sleep "$wait_time"
	sudo reboot
fi

# End jobs

if [ "$disable_done" == False ]; then
      echo -e ${Color_Off}${bold}Done !
fi
